#pragma version 7
intcblock 0 1 2 24
bytecblock 0x72657374696e675f6f7264657273 0x626f6f6b 0x73657175656e6365 0x151f7c75
txn ApplicationID
intc_0 // 0
==
txn OnCompletion
intc_2 // CloseOut
==
&&
bnz main_l28
txn ApplicationID
intc_0 // 0
==
txn OnCompletion
pushint 5 // DeleteApplication
==
&&
bnz main_l27
txn ApplicationID
intc_0 // 0
==
txn OnCompletion
intc_0 // NoOp
==
&&
bnz main_l26
txn ApplicationID
intc_0 // 0
==
txn OnCompletion
intc_1 // OptIn
==
&&
bnz main_l25
txn ApplicationID
intc_0 // 0
==
txn OnCompletion
pushint 4 // UpdateApplication
==
&&
bnz main_l24
txna ApplicationArgs 0
pushbytes 0xbec76d87 // "bootstrap()void"
==
txn OnCompletion
intc_0 // NoOp
==
&&
bnz main_l23
txna ApplicationArgs 0
pushbytes 0xe8270d09 // "new_order((uint64,uint64))void"
==
txn OnCompletion
intc_0 // NoOp
==
&&
bnz main_l22
txna ApplicationArgs 0
pushbytes 0x309c9ba0 // "peek_root()(uint64,uint64,uint64)"
==
txn OnCompletion
intc_0 // NoOp
==
&&
bnz main_l21
txna ApplicationArgs 0
pushbytes 0xdc05ebb9 // "fill_root()(uint64,uint64,uint64)"
==
txn OnCompletion
intc_0 // NoOp
==
&&
bnz main_l20
txna ApplicationArgs 0
pushbytes 0xe83a87ab // "noop()void"
==
txn OnCompletion
intc_0 // NoOp
==
&&
bnz main_l19
txn OnCompletion
intc_2 // CloseOut
==
bnz main_l18
txn OnCompletion
pushint 5 // DeleteApplication
==
bnz main_l17
txn OnCompletion
intc_1 // OptIn
==
bnz main_l16
txn OnCompletion
pushint 4 // UpdateApplication
==
bnz main_l15
err
main_l15:
txn Sender
global CreatorAddress
==
return
main_l16:
intc_0 // 0
return
main_l17:
txn Sender
global CreatorAddress
==
return
main_l18:
intc_0 // 0
return
main_l19:
callsub noop_11
intc_1 // 1
return
main_l20:
callsub fillroot_10
store 1
bytec_3 // 0x151f7c75
load 1
concat
log
intc_1 // 1
return
main_l21:
callsub peekroot_9
store 0
bytec_3 // 0x151f7c75
load 0
concat
log
intc_1 // 1
return
main_l22:
txna ApplicationArgs 1
callsub neworder_8
intc_1 // 1
return
main_l23:
callsub bootstrap_6
intc_1 // 1
return
main_l24:
txn Sender
global CreatorAddress
==
return
main_l25:
intc_0 // 0
return
main_l26:
intc_1 // 1
return
main_l27:
txn Sender
global CreatorAddress
==
return
main_l28:
intc_0 // 0
return

// pq_insert
pqinsert_0:
store 9
store 8
store 7
load 7
load 8
load 9
len
*
load 9
box_replace
load 7
load 8
load 9
len
callsub pqupheap_4
bytec_0 // "resting_orders"
bytec_0 // "resting_orders"
app_global_get
intc_1 // 1
+
app_global_put
retsub

// pq_swap
pqswap_1:
store 20
store 19
store 18
store 17
load 17
load 18
load 20
*
load 20
box_extract
store 21
load 17
load 19
load 20
*
load 20
box_extract
store 22
load 17
load 19
load 21
len
*
load 21
box_replace
load 17
load 18
load 22
len
*
load 22
box_replace
retsub

// pq_pop
pqpop_2:
store 26
store 25
load 25
intc_0 // 0
load 26
box_extract
store 27
bytec_0 // "resting_orders"
bytec_0 // "resting_orders"
app_global_get
intc_1 // 1
-
app_global_put
load 25
intc_0 // 0
bytec_0 // "resting_orders"
app_global_get
load 26
callsub pqswap_1
load 25
intc_0 // 0
load 26
callsub pqdownheap_5
load 27
retsub

// sorted_lt
sortedlt_3:
store 23
extract 0 16
load 23
extract 0 16
b<
retsub

// pq_upheap
pqupheap_4:
store 12
store 11
store 10
load 11
intc_0 // 0
!=
bz pqupheap_4_l9
load 11
store 13
pqupheap_4_l2:
load 13
intc_0 // 0
>
bz pqupheap_4_l9
load 10
load 13
load 12
*
load 12
box_extract
store 14
load 13
intc_2 // 2
%
intc_0 // 0
==
bnz pqupheap_4_l8
load 13
pqupheap_4_l5:
intc_2 // 2
/
store 15
load 10
load 15
load 12
*
load 12
box_extract
store 16
load 14
load 16
callsub sortedlt_3
bnz pqupheap_4_l7
intc_0 // 0
store 13
b pqupheap_4_l2
pqupheap_4_l7:
load 10
load 13
load 15
load 12
callsub pqswap_1
load 15
store 13
b pqupheap_4_l2
pqupheap_4_l8:
load 13
intc_1 // 1
-
b pqupheap_4_l5
pqupheap_4_l9:
retsub

// pq_downheap
pqdownheap_5:
store 30
store 29
store 28
load 29
store 31
intc_1 // 1
store 32
pqdownheap_5_l1:
load 32
bz pqdownheap_5_l15
load 31
store 33
load 28
load 33
load 30
*
load 30
box_extract
store 34
load 33
intc_2 // 2
*
store 35
load 35
bytec_0 // "resting_orders"
app_global_get
<
bnz pqdownheap_5_l14
load 30
bzero
b~
pqdownheap_5_l4:
store 36
load 34
load 36
callsub sortedlt_3
!
bnz pqdownheap_5_l13
pqdownheap_5_l5:
load 33
intc_2 // 2
*
intc_1 // 1
+
store 37
load 37
bytec_0 // "resting_orders"
app_global_get
<
bnz pqdownheap_5_l12
load 30
bzero
b~
pqdownheap_5_l7:
store 38
load 34
load 38
callsub sortedlt_3
!
bnz pqdownheap_5_l11
pqdownheap_5_l8:
load 31
load 33
!=
bnz pqdownheap_5_l10
intc_0 // 0
store 32
b pqdownheap_5_l1
pqdownheap_5_l10:
load 28
load 33
load 31
load 30
callsub pqswap_1
b pqdownheap_5_l1
pqdownheap_5_l11:
load 37
store 31
b pqdownheap_5_l8
pqdownheap_5_l12:
load 28
load 37
load 30
*
load 30
box_extract
b pqdownheap_5_l7
pqdownheap_5_l13:
load 35
store 31
b pqdownheap_5_l5
pqdownheap_5_l14:
load 28
load 35
load 30
*
load 30
box_extract
b pqdownheap_5_l4
pqdownheap_5_l15:
retsub

// bootstrap
bootstrap_6:
pushint 16384 // 16384
bytec_1 // "book"
box_create
bytec_2 // "sequence"
intc_0 // 0
app_global_put
retsub

// assign_sequence
assignsequence_7:
bytec_2 // "sequence"
app_global_get
store 24
bytec_2 // "sequence"
load 24
intc_1 // 1
+
app_global_put
load 24
retsub

// new_order
neworder_8:
store 2
load 2
intc_0 // 0
extract_uint64
store 3
load 2
pushint 8 // 8
extract_uint64
store 4
callsub assignsequence_7
store 5
load 3
itob
load 5
itob
concat
load 4
itob
concat
store 6
bytec_1 // "book"
bytec_0 // "resting_orders"
app_global_get
load 6
callsub pqinsert_0
retsub

// peek_root
peekroot_9:
bytec_1 // "book"
intc_0 // 0
intc_3 // 24
*
intc_3 // 24
box_extract
retsub

// fill_root
fillroot_10:
bytec_1 // "book"
intc_3 // 24
callsub pqpop_2
retsub

// noop
noop_11:
retsub