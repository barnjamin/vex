import algosdk from "algosdk";
import * as bkr from "beaker-ts";
export class Vex extends bkr.ApplicationClient {
    desc: string = "";
    override appSchema: bkr.Schema = { declared: { ask: { type: bkr.AVMType.uint64, key: "ask", desc: "", static: false }, ask_counter: { type: bkr.AVMType.uint64, key: "ask_book", desc: "", static: false }, asset_a: { type: bkr.AVMType.uint64, key: "asset_a", desc: "", static: false }, asset_b: { type: bkr.AVMType.uint64, key: "asset_b", desc: "", static: false }, bid: { type: bkr.AVMType.uint64, key: "bid", desc: "", static: false }, bid_counter: { type: bkr.AVMType.uint64, key: "bid_book", desc: "", static: false }, max_decimals: { type: bkr.AVMType.uint64, key: "max_decimals", desc: "", static: false }, mid: { type: bkr.AVMType.uint64, key: "mid", desc: "", static: false }, min_lot_a: { type: bkr.AVMType.uint64, key: "min_lot_a", desc: "", static: false }, min_lot_b: { type: bkr.AVMType.uint64, key: "min_lot_b", desc: "", static: false }, seq: { type: bkr.AVMType.uint64, key: "seq", desc: "", static: false } }, dynamic: {} };
    override acctSchema: bkr.Schema = { declared: { avail_bal_a: { type: bkr.AVMType.uint64, key: "avail_bal_a", desc: "", static: false }, avail_bal_b: { type: bkr.AVMType.uint64, key: "avail_bal_b", desc: "", static: false }, orders: { type: bkr.AVMType.bytes, key: "orders", desc: "", static: false }, reserved_bal_a: { type: bkr.AVMType.uint64, key: "reserved_bal_a", desc: "", static: false }, reserved_bal_b: { type: bkr.AVMType.uint64, key: "reserved_bal_b", desc: "", static: false } }, dynamic: {} };
    override approvalProgram: string = "";
    override clearProgram: string = "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu";
    methods: algosdk.ABIMethod[] = [
        new algosdk.ABIMethod({ name: "boostrap", desc: "", args: [], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "cancel_order", desc: "", args: [{ type: "uint64", name: "price", desc: "" }, { type: "uint64", name: "seq", desc: "" }, { type: "uint64", name: "size", desc: "" }, { type: "uint64", name: "acct_id", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "modify_order", desc: "", args: [{ type: "uint64", name: "price", desc: "" }, { type: "uint64", name: "seq", desc: "" }, { type: "uint64", name: "size", desc: "" }, { type: "uint64", name: "acct_id", desc: "" }, { type: "uint64", name: "new_size", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "new_order", desc: "", args: [{ type: "bool", name: "is_bid", desc: "" }, { type: "uint64", name: "price", desc: "" }, { type: "uint64", name: "size", desc: "" }], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "register", desc: "", args: [{ type: "account", name: "acct", desc: "" }, { type: "asset", name: "asset_a", desc: "" }, { type: "asset", name: "asset_b", desc: "" }], returns: { type: "void", desc: "" } })
    ];
    async boostrap(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.call(algosdk.getMethodByName(this.methods, "boostrap"), {}, txnParams);
        return new bkr.ABIResult<void>(result);
    }
    async cancel_order(args: {
        price: bigint;
        seq: bigint;
        size: bigint;
        acct_id: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.call(algosdk.getMethodByName(this.methods, "cancel_order"), { price: args.price, seq: args.seq, size: args.size, acct_id: args.acct_id }, txnParams);
        return new bkr.ABIResult<void>(result);
    }
    async modify_order(args: {
        price: bigint;
        seq: bigint;
        size: bigint;
        acct_id: bigint;
        new_size: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.call(algosdk.getMethodByName(this.methods, "modify_order"), { price: args.price, seq: args.seq, size: args.size, acct_id: args.acct_id, new_size: args.new_size }, txnParams);
        return new bkr.ABIResult<void>(result);
    }
    async new_order(args: {
        is_bid: boolean;
        price: bigint;
        size: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.call(algosdk.getMethodByName(this.methods, "new_order"), { is_bid: args.is_bid, price: args.price, size: args.size }, txnParams);
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async register(args: {
        acct: string;
        asset_a: bigint;
        asset_b: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.call(algosdk.getMethodByName(this.methods, "register"), { acct: args.acct, asset_a: args.asset_a, asset_b: args.asset_b }, txnParams);
        return new bkr.ABIResult<void>(result);
    }
}
